name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Check branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "Wrong Call"
            exit 1
          fi

      - name: Check commit message format
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          MODEL=$(echo $COMMIT_MSG | cut -d '-' -f 1)
          DETAILS=$(echo $COMMIT_MSG | cut -d '-' -f 2-)
          if [ -z "$MODEL" ] || [ -z "$DETAILS" ]; then
            echo "Commit message does not follow the required format '(Model)-(Commit details)'."
            exit 1
          fi
          echo "MODEL=$MODEL" >> $GITHUB_ENV
          echo "DETAILS=$DETAILS" >> $GITHUB_ENV

      - name: Check model directory
        run: |
          if [ ! -d "$MODEL" ]; then
            echo "$MODEL does not exist."
            exit 1
          fi

      - name: Check for Dockerfile with extension
        run: |
          if [ -z "$(find $MODEL -type f -name '*.Dockerfile')" ]; then
            echo "No .Dockerfile found in the $MODEL directory."
            exit 1
          fi

      - name: Build and run Docker images
        run: |
          MODEL_LOWER=$(echo "$MODEL" | tr '[:upper:]' '[:lower:]')
          cd $MODEL
          docker build -f infer.Dockerfile -t ${MODEL_LOWER}-infer .
          docker build -f train.Dockerfile -t ${MODEL_LOWER}-train .
          docker run ${MODEL_LOWER}-infer
          docker run ${MODEL_LOWER}-train

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push images to Amazon ECR
        run: |
          IMAGE_TAG=${{ github.actor }}
          docker tag $MODEL-infer:latest ${{ secrets.WEBHOOK_URL }}/$MODEL-infer:$IMAGE_TAG
          docker tag $MODEL-train:latest ${{ secrets.WEBHOOK_URL }}/$MODEL-train:$IMAGE_TAG
          docker push ${{ secrets.WEBHOOK_URL }}/$MODEL-infer:$IMAGE_TAG
          docker push ${{ secrets.WEBHOOK_URL }}/$MODEL-train:$IMAGE_TAG

